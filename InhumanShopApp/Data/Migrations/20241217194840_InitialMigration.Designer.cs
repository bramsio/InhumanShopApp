// <auto-generated />
using System;
using InhumanShopApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InhumanShopApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241217194840_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medications"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Food"
                        });
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chat Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IsFromUser")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of order");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order item identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Product quanity");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasComment("Product count");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Product description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Product image url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product Price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Count = 50,
                            Description = "High-quality dog food for adult dogs.",
                            ImageUrl = "images/Products/Premium_Dog_Food.jpg",
                            Name = "Premium Dog Food",
                            Price = 45.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Count = 20,
                            Description = "Durable scratching post for cats.",
                            ImageUrl = "images/Products/Cat_Scratching_Post.jpg",
                            Name = "Cat Scratching Post",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Count = 100,
                            Description = "Rubber chew toy to keep your dog entertained.",
                            ImageUrl = "images/Products/Dog_Chew_Toy.jpg",
                            Name = "Dog Chew Toy",
                            Price = 15.49m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Count = 75,
                            Description = "Adjustable cat collar with a small bell.",
                            ImageUrl = "images/Products/Cat_Collar_with_Bell.jpg",
                            Name = "Cat Collar with Bell",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Count = 30,
                            Description = "Comfortable bed for medium-sized dogs.",
                            ImageUrl = "images/Products/Dog_And_Cat_Bed.jpg",
                            Name = "Dog And Cat Bed",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            Count = 40,
                            Description = "Cat litter with odor-neutralizing technology.",
                            ImageUrl = "images/Products/Cat_Litter-Odor_Control.jpg",
                            Name = "Cat Litter - Odor Control",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Count = 60,
                            Description = "Gentle shampoo for dogs with sensitive skin.",
                            ImageUrl = "images/Products/Dog_Shampoo-Sensitive_Skin.jpg",
                            Name = "Dog Shampoo - Sensitive Skin",
                            Price = 12.49m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            Count = 200,
                            Description = "Delicious salmon-flavored treats for cats.",
                            ImageUrl = "images/Products/Cat_Treats-Salmon_Flavor.jpg",
                            Name = "Cat Treats - Salmon Flavor",
                            Price = 5.99m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Count = 25,
                            Description = "Adjustable harness for comfortable walks.",
                            ImageUrl = "images/Products/Dog_Harness-Adjustable.jpg",
                            Name = "Dog Harness - Adjustable",
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Count = 15,
                            Description = "Interactive tunnel toy for cats to play and hide.",
                            ImageUrl = "images/Products/Cat_Tunnel.jpg",
                            Name = "Cat Tunnel",
                            Price = 34.99m
                        });
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Size Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "S"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            Name = "L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "XL"
                        });
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Status identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "7699db7d-964f-4782-8209-d76562e0fece",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "957b6e79-cf85-4fdd-ac29-b229491755eb",
                            Email = "admin@zooshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Belgin",
                            NormalizedEmail = "ADMIN@ZOOSHOP.COM",
                            NormalizedUserName = "ADMIN@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyfNKIRf7IhSSBHz4cmh23X4AWA4jFWwRQ+AqrVynSn5W2rEg73RBf7RuD+JgvHIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cec13a9e-b68a-481a-80af-371522e8cf41",
                            TwoFactorEnabled = false,
                            UserName = "admin@zooshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "c3260e38-4360-402c-bcbf-8b2040ae1e58",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "6dbd8bf0-8829-4bd7-83dc-65165c77f6af",
                            Name = "Veterinarian",
                            NormalizedName = "VETERINARIAN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "767203e2-5bd5-47e4-ab56-d24d55aa5473",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7699db7d-964f-4782-8209-d76562e0fece",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-1234-5678-9876-abcdefabcdef",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-2345-6789-9876-abcdefabcdef",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-3456-7890-9876-abcdefabcdef",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-4567-8901-9876-abcdefabcdef",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-5678-9012-9876-abcdefabcdef",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-6789-0123-9876-abcdefabcdef",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1b2c3d4-7890-1234-9876-abcdefabcdef",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("SizesId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "SizesId");

                    b.HasIndex("SizesId");

                    b.ToTable("ProductSize");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Veterinarian", b =>
                {
                    b.HasBaseType("InhumanShopApp.Infrastructure.Data.Models.User");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Veterinarian");

                    b.HasData(
                        new
                        {
                            Id = "a1b2c3d4-1234-5678-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da5149b2-b394-47f1-823b-97c72889f326",
                            Email = "sarah@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Sarah Johnson",
                            NormalizedEmail = "SARAH@ZOOSHOP.COM",
                            NormalizedUserName = "SARAH@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAue0Yfu+7zbXmsbHDRlKVkoe/6jENCjUOyD3Fba/KxgtLSwiokTM+2d7TmdCGOblA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c4b9e36-b46f-42bb-ad1c-6a09c86d4792",
                            TwoFactorEnabled = false,
                            UserName = "sarah@zooshop.com",
                            Specialization = "Small Animals",
                            TelNumber = "+359888123456",
                            YearsOfExperience = 8
                        },
                        new
                        {
                            Id = "a1b2c3d4-2345-6789-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e001cd27-976b-40e1-b74d-df896ad514e3",
                            Email = "michael@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Michael Brown",
                            NormalizedEmail = "MICHAEL@ZOOSHOP.COM",
                            NormalizedUserName = "MICHAEL@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFkxvMWOkElUHWM5ReSiTAdyUfQBuES98HvZueR3vhl0NSvIOnEvXxUxytTNiaJrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff24dadc-4ed8-4d31-b9ca-05917311e081",
                            TwoFactorEnabled = false,
                            UserName = "michael@zooshop.com",
                            Specialization = "Exotic Animals",
                            TelNumber = "+359888654321",
                            YearsOfExperience = 12
                        },
                        new
                        {
                            Id = "a1b2c3d4-3456-7890-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f1ce7dd-19fa-4ced-9138-0973fe5180fe",
                            Email = "emma@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Emma Davis",
                            NormalizedEmail = "EMMA@ZOOSHOP.COM",
                            NormalizedUserName = "EMMA@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEru0Vs5qDW1/9Jy84IujVUEixyqJXd1P02HkZQwunp/7cP1/iM8mEw9XzhMAtPNKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0c111ec-fdc7-40ce-8377-b0a9d11cf86a",
                            TwoFactorEnabled = false,
                            UserName = "emma@zooshop.com",
                            Specialization = "Large Animals",
                            TelNumber = "+359888987654",
                            YearsOfExperience = 10
                        },
                        new
                        {
                            Id = "a1b2c3d4-4567-8901-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dcbc29d-c9bc-4120-bc59-4b9d2ed5e7af",
                            Email = "john@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. John Smith",
                            NormalizedEmail = "JOHN@ZOOSHOP.COM",
                            NormalizedUserName = "JOHN@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIV54PFjtfMq6ruLELOioyc8htclvHJyGviYc3wNPaev/zHtQ8YDsNvP3FkMVqNHMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7be556e1-e03b-4d42-90d5-37b8b93f9688",
                            TwoFactorEnabled = false,
                            UserName = "john@zooshop.com",
                            Specialization = "Birds",
                            TelNumber = "+359888456789",
                            YearsOfExperience = 6
                        },
                        new
                        {
                            Id = "a1b2c3d4-5678-9012-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a823afa-8d8c-458c-938c-597d83e9115d",
                            Email = "olivia@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Olivia Wilson",
                            NormalizedEmail = "OLIVIA@ZOOSHOP.COM",
                            NormalizedUserName = "OLIVIA@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxhl1X+BzzhfXN91OlIo9PPSMdY4KdTOoL88XdFWOHuJtui2Gc9c1pNw6taaYNJww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca2bca7e-dceb-4ed8-ac5e-c26d12c1c9fa",
                            TwoFactorEnabled = false,
                            UserName = "olivia@zooshop.com",
                            Specialization = "Reptiles",
                            TelNumber = "+359888123789",
                            YearsOfExperience = 7
                        },
                        new
                        {
                            Id = "a1b2c3d4-6789-0123-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f094e77-5b6a-4a2f-98e6-278ebe0a8075",
                            Email = "william@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. William Garcia",
                            NormalizedEmail = "WILLIAM@ZOOSHOP.COM",
                            NormalizedUserName = "WILLIAM@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIW3qcq2P3XI1ZAja/Kj2JKmBbTYdB+4QckpFz4y2XzZ0Q2VTKoSiFVYzTcG0zJQbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "775a56df-5918-4286-9600-78e1d9102563",
                            TwoFactorEnabled = false,
                            UserName = "william@zooshop.com",
                            Specialization = "Fish",
                            TelNumber = "+359888654987",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            Id = "a1b2c3d4-7890-1234-9876-abcdefabcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8987a47e-045c-49bf-bc43-b7e1e8fabf62",
                            Email = "sophia@zooshop.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Sophia Martinez",
                            NormalizedEmail = "SOPHIA@ZOOSHOP.COM",
                            NormalizedUserName = "SOPHIA@ZOOSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxMNCLnhSG8aPLd+2ikph3061KyHNCT2HMXr90RogXCAtSYgZDUbg6NKxhSmZm2aA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beca75aa-c34c-43ad-b375-4d91446caacb",
                            TwoFactorEnabled = false,
                            UserName = "sophia@zooshop.com",
                            Specialization = "Wildlife",
                            TelNumber = "+359888987123",
                            YearsOfExperience = 15
                        });
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Chat", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.OrderItem", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("InhumanShopApp.Infrastructure.Data.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InhumanShopApp.Infrastructure.Data.Models.Size", null)
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("InhumanShopApp.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
